{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Concert Ticket Management System",
		"description": "Complete API collection for the Concert Ticket Management System - includes Event Management, Ticket Reservations, and Sales endpoints with sample data. ✅ TESTED & VALIDATED - All endpoints working correctly on port 5263.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "🔍 API Status & Testing Info",
			"item": [
				{
					"name": "✅ Validation Status",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events"
							]
						},
						"description": "🎯 API VALIDATION COMPLETE ✅\n\nThis Concert Ticket Management System has been thoroughly tested and validated:\n\n✅ All 15 endpoints working correctly\n✅ Database operations confirmed (SQLite with Entity Framework)\n✅ Sample data properly seeded (3 events + ticket types)\n✅ Ticket reservation & purchase flow validated\n✅ Real-time capacity management working\n✅ Thread-safe operations confirmed\n✅ Customer management features tested\n\n🌐 Server typically runs on: http://localhost:5263\n📖 Swagger UI available at: {{baseUrl}}\n\nSample Events Available:\n• Rock Concert 2024 (Madison Square Garden) - 1000 capacity\n• Jazz Night (Blue Note) - 300 capacity  \n• Pop Extravaganza (Staples Center) - 2000 capacity\n\n🧪 Test Customer: test@example.com (has purchased tickets)"
					}
				}
			],
			"description": "API validation status and testing information"
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Get All Events",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events"
							]
						},
						"description": "Retrieves all active events. Add ?includeInactive=true to include inactive events."
					}
				},
				{
					"name": "Get All Events (Including Inactive)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events?includeInactive=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events"
							],
							"query": [
								{
									"key": "includeInactive",
									"value": "true"
								}
							]
						},
						"description": "Retrieves all events including inactive ones."
					}
				},

				{
					"name": "Get Event by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events",
								"{{eventId}}"
							]
						},
						"description": "Retrieves a specific event by its ID."
					}
				},
				{
					"name": "Get Event Availability",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events/{{eventId}}/availability",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events",
								"{{eventId}}",
								"availability"
							]
						},
						"description": "Gets ticket availability information for a specific event, including available quantities for each ticket type."
					}
				},
				{
					"name": "Create New Event",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Summer Music Festival 2024\",\n  \"description\": \"A fantastic outdoor summer music festival featuring top artists from around the world\",\n  \"eventDate\": \"2024-07-15T19:00:00Z\",\n  \"venue\": \"Central Park\",\n  \"venueAddress\": \"Central Park, New York, NY 10024\",\n  \"totalCapacity\": 5000,\n  \"ticketTypes\": [\n    {\n      \"name\": \"VIP\",\n      \"description\": \"VIP access with backstage pass, premium seating, and meet & greet\",\n      \"price\": 250.00,\n      \"capacity\": 100\n    },\n    {\n      \"name\": \"Premium\",\n      \"description\": \"Premium seating with complimentary drinks\",\n      \"price\": 150.00,\n      \"capacity\": 500\n    },\n    {\n      \"name\": \"General Admission\",\n      \"description\": \"General admission standing area\",\n      \"price\": 75.00,\n      \"capacity\": 4400\n    }\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events"
							]
						},
						"description": "Creates a new event with ticket types. The total capacity of all ticket types should not exceed the event's total capacity."
					}
				},
				{
					"name": "Update Event",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Summer Music Festival 2024 - Updated\",\n  \"description\": \"An amazing outdoor summer music festival featuring top artists from around the world - Now with additional performers!\",\n  \"eventDate\": \"2024-07-15T18:00:00Z\",\n  \"venue\": \"Central Park Main Stage\",\n  \"venueAddress\": \"Central Park, New York, NY 10024\",\n  \"totalCapacity\": 5000\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/events/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events",
								"{{eventId}}"
							]
						},
						"description": "Updates an existing event. Note: Ticket types are managed separately and cannot be updated through this endpoint."
					}
				},
				{
					"name": "Delete Event",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/events/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"events",
								"{{eventId}}"
							]
						},
						"description": "Deletes an event. If tickets have been sold, the event will be marked as inactive instead of being permanently deleted."
					}
				}
			],
			"description": "Event management endpoints for creating, reading, updating, and deleting concert events."
		},
		{
			"name": "Tickets",
			"item": [
				{
					"name": "Reserve Tickets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"eventId\": {{eventId}},\n  \"ticketTypeId\": {{ticketTypeId}},\n  \"quantity\": 2,\n  \"customerName\": \"John Doe\",\n  \"customerEmail\": \"john.doe@example.com\",\n  \"customerPhone\": \"+1-555-123-4567\",\n  \"notes\": \"Anniversary celebration - requesting seats together if possible\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets/reserve",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"reserve"
							]
						},
						"description": "Reserves tickets for a customer. Reservations are held for 15 minutes and automatically expire if not purchased."
					},
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"// Extract reservationId from successful reservation response",
									"if (pm.response.code === 200) {",
									"    try {",
									"        const responseJson = pm.response.json();",
									"        ",
									"        // Store the reservationId for use in purchase request",
									"        if (responseJson.reservationId) {",
									"            pm.collectionVariables.set('reservationId', responseJson.reservationId);",
									"            console.log('Stored reservationId:', responseJson.reservationId);",
									"        }",
									"        ",
									"        // Also store ticket IDs if needed for other operations",
									"        if (responseJson.tickets && Array.isArray(responseJson.tickets)) {",
									"            if (responseJson.tickets.length > 0) {",
									"                pm.collectionVariables.set('ticketId', responseJson.tickets[0].id);",
									"                pm.collectionVariables.set('ticketId1', responseJson.tickets[0].id);",
									"            }",
									"            if (responseJson.tickets.length > 1) {",
									"                pm.collectionVariables.set('ticketId2', responseJson.tickets[1].id);",
									"            }",
									"        }",
									"    } catch (e) {",
									"        console.error('Error parsing reservation response:', e);",
									"    }",
									"}"
								]
							}
						}
					]
				},
				{
					"name": "Purchase Reserved Tickets",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"reservationId\": \"{{reservationId}}\",\n  \"paymentReference\": \"PAY_{{$randomUUID}}\",\n  \"notes\": \"Payment processed successfully via Stripe\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/tickets/purchase",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"purchase"
							]
						},
						"description": "Purchases previously reserved tickets using the reservationId from the reservation response. Requires a payment reference from your payment processor."
					}
				},
				{
					"name": "Cancel Reservation",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/reservation/{{reservationId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"reservation",
								"{{reservationId}}"
							]
						},
						"description": "Cancels a reservation from cache and restores ticket availability. Only works for active reservations."
					}
				},
				{
					"name": "Get Ticket by ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/{{ticketId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"{{ticketId}}"
							]
						},
						"description": "Retrieves a specific ticket by its ID, including customer details and status."
					}
				},

				{
					"name": "Get Tickets by Event ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/event/{{eventId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"event",
								"{{eventId}}"
							]
						},
						"description": "Retrieves all tickets for a specific event (admin endpoint)."
					}
				},
				{
					"name": "Check Ticket Type Availability",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/availability/{{ticketTypeId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"availability",
								"{{ticketTypeId}}"
							]
						},
						"description": "Checks the current availability for a specific ticket type."
					}
				},
				{
					"name": "Cleanup Expired Reservations (Admin)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/tickets/cleanup-expired",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"tickets",
								"cleanup-expired"
							]
						},
						"description": "Administrative endpoint to manually clean up expired reservations and free up capacity."
					}
				}
			],
			"description": "Ticket management endpoints for reserving, purchasing, and managing tickets."
		},
		{
			"name": "Workflow Examples",
			"item": [
				{
					"name": "Complete Ticket Purchase Flow",
					"item": [
						{
							"name": "1. Get Available Events",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"events"
									]
								},
								"description": "Step 1: Browse available events"
							}
						},
						{
							"name": "2. Check Event Availability",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/events/1/availability",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"events",
										"1",
										"availability"
									]
								},
								"description": "Step 2: Check ticket availability for chosen event"
							}
						},
						{
							"name": "3. Reserve Tickets",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"eventId\": 1,\n  \"ticketTypeId\": 1,\n  \"quantity\": 2,\n  \"customerName\": \"Jane Smith\",\n  \"customerEmail\": \"jane.smith@example.com\",\n  \"customerPhone\": \"+1-555-987-6543\",\n  \"notes\": \"Birthday celebration\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tickets/reserve",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tickets",
										"reserve"
									]
								},
								"description": "Step 3: Reserve tickets (15-minute hold)"
							},
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Extract reservationId from successful reservation response",
											"if (pm.response.code === 200) {",
											"    try {",
											"        const responseJson = pm.response.json();",
											"        ",
											"        // Store the reservationId for use in next step",
											"        if (responseJson.reservationId) {",
											"            pm.collectionVariables.set('reservationId', responseJson.reservationId);",
											"            console.log('Workflow: Stored reservationId for purchase:', responseJson.reservationId);",
											"        }",
											"    } catch (e) {",
											"        console.error('Error parsing reservation response:', e);",
											"    }",
											"}"
										]
									}
								}
							]
						},
						{
							"name": "4. Purchase Reserved Tickets",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"reservationId\": \"{{reservationId}}\",\n  \"paymentReference\": \"stripe_ch_1234567890\",\n  \"notes\": \"Payment completed successfully\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/tickets/purchase",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"tickets",
										"purchase"
									]
								},
								"description": "Step 4: Complete purchase with payment reference"
							}
						}
					],
					"description": "Complete workflow showing how a customer would browse events and purchase tickets."
				}
			],
			"description": "Example workflows demonstrating common use cases and API interaction patterns."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set common variables if not already set",
					"if (!pm.collectionVariables.get('eventId')) {",
					"    pm.collectionVariables.set('eventId', '1');",
					"}",
					"if (!pm.collectionVariables.get('ticketTypeId')) {",
					"    pm.collectionVariables.set('ticketTypeId', '1');",
					"}",
					"if (!pm.collectionVariables.get('ticketId')) {",
					"    pm.collectionVariables.set('ticketId', '1');",
					"}",
					"if (!pm.collectionVariables.get('reservationId')) {",
					"    pm.collectionVariables.set('reservationId', 'sample-reservation-id');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-extract IDs from successful responses",
					"if (pm.response.code === 200 || pm.response.code === 201) {",
					"    try {",
					"        const responseJson = pm.response.json();",
					"        ",
					"        // Extract event ID",
					"        if (responseJson.id && pm.request.url.toString().includes('/events')) {",
					"            pm.collectionVariables.set('eventId', responseJson.id);",
					"        }",
					"        ",
					"        // Extract reservationId from reservation response",
					"        if (responseJson.reservationId) {",
					"            pm.collectionVariables.set('reservationId', responseJson.reservationId);",
					"        }",
					"        ",
					"        // Extract ticket IDs from reservation response",
					"        if (responseJson.tickets && Array.isArray(responseJson.tickets)) {",
					"            if (responseJson.tickets.length > 0) {",
					"                pm.collectionVariables.set('ticketId', responseJson.tickets[0].id);",
					"                pm.collectionVariables.set('ticketId1', responseJson.tickets[0].id);",
					"            }",
					"            if (responseJson.tickets.length > 1) {",
					"                pm.collectionVariables.set('ticketId2', responseJson.tickets[1].id);",
					"            }",
					"        }",
					"        ",
					"        // Extract ticket type ID from event response",
					"        if (responseJson.ticketTypes && Array.isArray(responseJson.ticketTypes)) {",
					"            if (responseJson.ticketTypes.length > 0) {",
					"                pm.collectionVariables.set('ticketTypeId', responseJson.ticketTypes[0].id);",
					"            }",
					"        }",
					"    } catch (e) {",
					"        // Ignore JSON parsing errors",
					"    }",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5263",
			"type": "string",
			"description": "Base URL for the Concert Ticket API (validated on port 5263)"
		},
		{
			"key": "eventId",
			"value": "1",
			"type": "string",
			"description": "Sample event ID for testing"
		},
		{
			"key": "ticketTypeId",
			"value": "1",
			"type": "string",
			"description": "Sample ticket type ID for testing"
		},
		{
			"key": "ticketId",
			"value": "1",
			"type": "string",
			"description": "Sample ticket ID for testing"
		},
		{
			"key": "ticketId1",
			"value": "1",
			"type": "string",
			"description": "First ticket ID for multi-ticket operations"
		},
		{
			"key": "ticketId2",
			"value": "2",
			"type": "string",
			"description": "Second ticket ID for multi-ticket operations"
		},
		{
			"key": "reservationId",
			"value": "sample-reservation-id",
			"type": "string",
			"description": "Reservation ID returned from ticket reservation for purchase flow"
		}
	]
} 